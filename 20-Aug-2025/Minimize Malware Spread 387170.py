# Problem: Minimize Malware Spread - https://leetcode.com/problems/minimize-malware-spread/

class Solution:
    def minMalwareSpread(self, graph: List[List[int]], initial: List[int]) -> int:
        n = len(graph)

        grp = [[i, 1] for i in range(n)]



        def find(x):
            g = grp[x][0]
            if g != x:
                g = find(g)
            grp[x][0] = g
            return g

        def union(x, y):
            g1, g2 = find(x), find(y)
            if g1 == g2: return
            if grp[g1][1] > grp[g2][1]:
                grp[g2][0] = g1
                grp[g1][1] += grp[g2][1]
            else:
                grp[g1][0] = g2
                grp[g2][1] += grp[g1][1]


        for i in range(n):
            for nei in range(n):
                if nei == i:
                    continue
                if graph[i][nei] == 1:
                    union(i, nei)

        cnt = Counter()

        for i in initial:
            cnt[find(i)] += 1
            
        size = []
        for i in initial:
            if cnt[find(i)] > 1: size.append(0)
            else:
                size.append(grp[find(i)][1])


        out = 0
        for i in range(1, len(initial)):
            if size[i] > size[out]:
                out = i
            elif size[i] == size[out] and initial[out] > initial[i]:
                out = i
        return initial[out]
        